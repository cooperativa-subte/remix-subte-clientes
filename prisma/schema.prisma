// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id@default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  username          String   @unique
  passwordHash      String
  clients           Client[]
  hostingProviders  HostingProvider[]
}

model Client {
  id            String   @id @default(uuid())
  creatorId     String
  creator       User     @relation(fields: [creatorId], references: [id], onDelete: Cascade )
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String
  contactEmail  String
  domains       Domain[]
  hostings      Hosting[]

}

model HostingProvider {
  id              String @id @default(uuid())
  ownerId         String
  owner           User @relation(fields: [ownerId], references: [id], onDelete: Cascade )
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  name            String
  provider        String
  price           Float
  currency        String
  expirationDate  DateTime
  hostings        Hosting[]
}

model Hosting {
  id              String @id @default(uuid())
  clientId        String
  client          Client @relation(fields: [clientId], references: [id], onDelete: Cascade )
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  serverName      String
  providerId      String
  provider        HostingProvider @relation(fields: [providerId], references: [id], onDelete: Cascade )
  website         String
  price           Float
  currency        String
  expirationDate  DateTime
  payoutDate      DateTime
}

model Domain {
  id             String @id @default(uuid())
  clientId       String
  client         Client @relation(fields: [clientId], references: [id], onDelete: Cascade )
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  domain         String
  price          Float
  currency       String
  expirationDate DateTime
  payoutDate     DateTime
}
